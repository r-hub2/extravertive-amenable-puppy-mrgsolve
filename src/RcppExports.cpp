// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/mrgsolve.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DEVTRAN
Rcpp::List DEVTRAN(const Rcpp::List parin, const Rcpp::List& funs, const Rcpp::NumericMatrix& data, const Rcpp::NumericMatrix& idata, const Rcpp::S4& mod);
RcppExport SEXP _mrgsolve_DEVTRAN(SEXP parinSEXP, SEXP funsSEXP, SEXP dataSEXP, SEXP idataSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type parin(parinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type funs(funsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type idata(idataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(DEVTRAN(parin, funs, data, idata, mod));
    return rcpp_result_gen;
END_RCPP
}
// MVGAUSS
arma::mat MVGAUSS(Rcpp::NumericMatrix& OMEGA_, int n);
RcppExport SEXP _mrgsolve_MVGAUSS(SEXP OMEGA_SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type OMEGA_(OMEGA_SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(MVGAUSS(OMEGA_, n));
    return rcpp_result_gen;
END_RCPP
}
// dcorr
void dcorr(Rcpp::NumericMatrix& x);
RcppExport SEXP _mrgsolve_dcorr(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    dcorr(x);
    return R_NilValue;
END_RCPP
}
// SUPERMATRIX
Rcpp::NumericMatrix SUPERMATRIX(const Rcpp::List& a, bool keep_names);
RcppExport SEXP _mrgsolve_SUPERMATRIX(SEXP aSEXP, SEXP keep_namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type keep_names(keep_namesSEXP);
    rcpp_result_gen = Rcpp::wrap(SUPERMATRIX(a, keep_names));
    return rcpp_result_gen;
END_RCPP
}
// MAKEMATRIX
arma::mat MAKEMATRIX(const Rcpp::S4& matlist);
RcppExport SEXP _mrgsolve_MAKEMATRIX(SEXP matlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::S4& >::type matlist(matlistSEXP);
    rcpp_result_gen = Rcpp::wrap(MAKEMATRIX(matlist));
    return rcpp_result_gen;
END_RCPP
}
// get_tokens
Rcpp::List get_tokens(const Rcpp::CharacterVector& code);
RcppExport SEXP _mrgsolve_get_tokens(SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tokens(code));
    return rcpp_result_gen;
END_RCPP
}
// EXPAND_EVENTS
Rcpp::NumericMatrix EXPAND_EVENTS(const Rcpp::IntegerVector& idcol_, const Rcpp::NumericMatrix& events, const Rcpp::NumericVector& id);
RcppExport SEXP _mrgsolve_EXPAND_EVENTS(SEXP idcol_SEXP, SEXP eventsSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type idcol_(idcol_SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(EXPAND_EVENTS(idcol_, events, id));
    return rcpp_result_gen;
END_RCPP
}
// EXPAND_OBSERVATIONS
Rcpp::List EXPAND_OBSERVATIONS(const Rcpp::NumericMatrix& data, const Rcpp::NumericVector& times, const Rcpp::IntegerVector& to_copy, const Rcpp::IntegerVector& next_pos);
RcppExport SEXP _mrgsolve_EXPAND_OBSERVATIONS(SEXP dataSEXP, SEXP timesSEXP, SEXP to_copySEXP, SEXP next_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type to_copy(to_copySEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type next_pos(next_posSEXP);
    rcpp_result_gen = Rcpp::wrap(EXPAND_OBSERVATIONS(data, times, to_copy, next_pos));
    return rcpp_result_gen;
END_RCPP
}
// TOUCH_FUNS
Rcpp::List TOUCH_FUNS(const Rcpp::List& funs, const Rcpp::S4 mod);
RcppExport SEXP _mrgsolve_TOUCH_FUNS(SEXP funsSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type funs(funsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::S4 >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(TOUCH_FUNS(funs, mod));
    return rcpp_result_gen;
END_RCPP
}
